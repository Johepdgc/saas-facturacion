"use client";
import { useState } from "react";
import Sidebar from "@/components/Sidebar";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faUser,
  faFileInvoice,
  faCalculator,
  faArrowLeft,
  faPlus,
  faTrash,
  faSave,
} from "@fortawesome/free-solid-svg-icons";

type InvoiceItem = {
  id: number;
  descripcion: string;
  cantidad: number;
  precioUnitario: number;
  total: number;
};

type InvoiceForm = {
  // Client data (will populate when client is selected)
  cliente: string;
  tipoDocumento: string;
  documento: string;
  correo: string;
  telefono: string;

  // Invoice data
  tipo: string;
  items: InvoiceItem[];

  // Backend will auto-generate these
  dte: string;
  estado: string;
  fecha: string;
  total: string;
};

export default function NuevaFactura() {
  const [form, setForm] = useState<InvoiceForm>({
    cliente: "",
    tipoDocumento: "DUI",
    documento: "",
    correo: "",
    telefono: "",
    tipo: "FACTURA",
    items: [
      {
        id: 1,
        descripcion: "",
        cantidad: 1,
        precioUnitario: 0,
        total: 0,
      },
    ],
    dte: "", // Auto-generated by backend
    estado: "", // Auto-generated by backend
    fecha: "", // Auto-generated by backend
    total: "",
  });

  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showClientSelector, setShowClientSelector] = useState(false);

  // Mock clients for selection
  const availableClients = [
    {
      nombre: "Johep Daniel Gradis Cortes",
      tipoDocumento: "DUI",
      documento: "06540720-9",
      correo: "johepdg07@icloud.com",
      telefono: "+503 6103 1008",
    },
    {
      nombre: "María Elena Rodríguez",
      tipoDocumento: "DUI",
      documento: "03456789-1",
      correo: "maria.rodriguez@email.com",
      telefono: "+503 2234 5678",
    },
    {
      nombre: "Empresa Tecnológica S.A. de C.V.",
      tipoDocumento: "NIT",
      documento: "0614-250184-001-3",
      correo: "info@empresa.com",
      telefono: "+503 2500 1000",
    },
  ];

  // Calculate item total
  const calculateItemTotal = (cantidad: number, precioUnitario: number) => {
    return cantidad * precioUnitario;
  };

  // Calculate invoice total
  const calculateInvoiceTotal = () => {
    return form.items.reduce((sum, item) => sum + item.total, 0);
  };

  // Handle client selection
  const handleClientSelect = (client: (typeof availableClients)[0]) => {
    setForm((prev) => ({
      ...prev,
      cliente: client.nombre,
      tipoDocumento: client.tipoDocumento,
      documento: client.documento,
      correo: client.correo,
      telefono: client.telefono,
    }));
    setShowClientSelector(false);
  };

  // Handle item changes
  const handleItemChange = (
    id: number,
    field: keyof InvoiceItem,
    value: string | number
  ) => {
    setForm((prev) => ({
      ...prev,
      items: prev.items.map((item) => {
        if (item.id === id) {
          const updatedItem = { ...item, [field]: value };
          if (field === "cantidad" || field === "precioUnitario") {
            updatedItem.total = calculateItemTotal(
              updatedItem.cantidad,
              updatedItem.precioUnitario
            );
          }
          return updatedItem;
        }
        return item;
      }),
    }));
  };

  // Add new item
  const addItem = () => {
    const newId = Math.max(...form.items.map((item) => item.id)) + 1;
    setForm((prev) => ({
      ...prev,
      items: [
        ...prev.items,
        {
          id: newId,
          descripcion: "",
          cantidad: 1,
          precioUnitario: 0,
          total: 0,
        },
      ],
    }));
  };

  // Remove item
  const removeItem = (id: number) => {
    if (form.items.length > 1) {
      setForm((prev) => ({
        ...prev,
        items: prev.items.filter((item) => item.id !== id),
      }));
    }
  };

  // Validate form
  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!form.cliente.trim()) newErrors.cliente = "Debe seleccionar un cliente";
    if (!form.documento.trim())
      newErrors.documento = "El documento es requerido";
    if (!form.correo.trim()) newErrors.correo = "El correo es requerido";
    if (!form.telefono.trim()) newErrors.telefono = "El teléfono es requerido";

    // Validate items
    form.items.forEach((item, index) => {
      if (!item.descripcion.trim()) {
        newErrors[`item_${index}_descripcion`] = "La descripción es requerida";
      }
      if (item.cantidad <= 0) {
        newErrors[`item_${index}_cantidad`] = "La cantidad debe ser mayor a 0";
      }
      if (item.precioUnitario <= 0) {
        newErrors[`item_${index}_precio`] = "El precio debe ser mayor a 0";
      }
    });

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) return;

    setIsSubmitting(true);

    try {
      // Simulate API call - in real implementation, backend will generate DTE, estado, fecha
      const invoiceData = {
        ...form,
        dte: `${Date.now()}-GENERATED-DTE-UUID`, // Backend will generate real DTE
        estado: "PROCESADO", // Backend will determine status
        fecha: new Date().toISOString().split("T")[0], // Backend will set creation date
        total: `$${calculateInvoiceTotal().toFixed(2)}`,
      };

      console.log("Invoice to submit:", invoiceData);

      // Simulate API delay
      await new Promise((resolve) => setTimeout(resolve, 2000));

      alert("¡Factura creada exitosamente!");

      // Reset form or redirect
      // router.push("/facturas");
    } catch {
      alert("Error al crear la factura. Intenta nuevamente.");
    } finally {
      setIsSubmitting(false);
    }
  };

  const invoiceTotal = calculateInvoiceTotal();

  return (
    <div className="flex min-h-screen bg-gray-50 overflow-hidden">
      <Sidebar active="facturas" />
      <main className="flex-1 p-12 overflow-auto">
        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <input
            className="border border-gray-300 rounded px-4 py-2 w-1/3 focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Buscar..."
          />
          <div className="flex items-center gap-2">
            <img
              src="https://randomuser.me/api/portraits/men/32.jpg"
              alt="User"
              className="w-8 h-8 rounded-full"
            />
            <div>
              <div className="font-bold">Name</div>
              <div className="text-xs text-gray-400">Description</div>
            </div>
          </div>
        </div>

        {/* Title and Navigation */}
        <div className="flex items-center gap-4 mb-8">
          <a href="/facturas" className="text-gray-600 hover:text-gray-800">
            <FontAwesomeIcon icon={faArrowLeft} className="text-xl" />
          </a>
          <div>
            <h1 className="text-4xl font-bold">Crear Nueva Factura</h1>
            <p className="text-gray-600 mt-1">
              Complete la información de la factura
            </p>
          </div>
        </div>

        <form onSubmit={handleSubmit} className="space-y-8">
          {/* Client Information Section */}
          <div className="bg-white rounded-xl shadow border border-gray-200 p-8">
            <h2 className="text-xl font-semibold mb-6 flex items-center gap-2">
              <FontAwesomeIcon icon={faUser} className="text-blue-600" />
              Información del Cliente
            </h2>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="md:col-span-2">
                <label className="block text-sm font-medium mb-2">
                  Cliente *
                </label>
                <div className="flex gap-2">
                  <input
                    type="text"
                    value={form.cliente}
                    readOnly
                    className="flex-1 border border-gray-300 rounded-lg px-4 py-3 bg-gray-50"
                    placeholder="Seleccione un cliente"
                  />
                  <button
                    type="button"
                    onClick={() => setShowClientSelector(!showClientSelector)}
                    className="bg-blue-600 text-white px-4 py-3 rounded-lg hover:bg-blue-700"
                  >
                    Seleccionar
                  </button>
                </div>
                {errors.cliente && (
                  <p className="text-red-500 text-sm mt-1">{errors.cliente}</p>
                )}
              </div>

              {/* Client selector dropdown */}
              {showClientSelector && (
                <div className="md:col-span-2 border border-gray-200 rounded-lg p-4 bg-gray-50">
                  <h3 className="font-medium mb-3">Seleccionar Cliente:</h3>
                  <div className="space-y-2 max-h-40 overflow-y-auto">
                    {availableClients.map((client, index) => (
                      <button
                        key={index}
                        type="button"
                        onClick={() => handleClientSelect(client)}
                        className="w-full text-left p-3 bg-white rounded border hover:bg-blue-50 hover:border-blue-300"
                      >
                        <div className="font-medium">{client.nombre}</div>
                        <div className="text-sm text-gray-500">
                          {client.tipoDocumento}: {client.documento} |{" "}
                          {client.correo}
                        </div>
                      </button>
                    ))}
                  </div>
                </div>
              )}

              <div>
                <label className="block text-sm font-medium mb-2">
                  Tipo de Documento
                </label>
                <input
                  type="text"
                  value={form.tipoDocumento}
                  readOnly
                  className="w-full border border-gray-300 rounded-lg px-4 py-3 bg-gray-50"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">
                  Documento
                </label>
                <input
                  type="text"
                  value={form.documento}
                  readOnly
                  className="w-full border border-gray-300 rounded-lg px-4 py-3 bg-gray-50"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">Correo</label>
                <input
                  type="email"
                  value={form.correo}
                  readOnly
                  className="w-full border border-gray-300 rounded-lg px-4 py-3 bg-gray-50"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">
                  Teléfono
                </label>
                <input
                  type="tel"
                  value={form.telefono}
                  readOnly
                  className="w-full border border-gray-300 rounded-lg px-4 py-3 bg-gray-50"
                />
              </div>
            </div>
          </div>

          {/* Invoice Type Section */}
          <div className="bg-white rounded-xl shadow border border-gray-200 p-8">
            <h2 className="text-xl font-semibold mb-6 flex items-center gap-2">
              <FontAwesomeIcon
                icon={faFileInvoice}
                className="text-green-600"
              />
              Tipo de Documento
            </h2>

            <div>
              <label className="block text-sm font-medium mb-2">
                Tipo de DTE
              </label>
              <select
                value={form.tipo}
                onChange={(e) =>
                  setForm((prev) => ({ ...prev, tipo: e.target.value }))
                }
                className="w-full md:w-1/3 border border-gray-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="FACTURA">Factura</option>
                <option value="CREDITO_FISCAL">Crédito Fiscal</option>
                <option value="NOTA_CREDITO">Nota de Crédito</option>
                <option value="NOTA_DEBITO">Nota de Débito</option>
              </select>
            </div>
          </div>

          {/* Items Section */}
          <div className="bg-white rounded-xl shadow border border-gray-200 p-8">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-xl font-semibold flex items-center gap-2">
                <FontAwesomeIcon
                  icon={faCalculator}
                  className="text-purple-600"
                />
                Detalles de la Factura
              </h2>
              <button
                type="button"
                onClick={addItem}
                className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center gap-2"
              >
                <FontAwesomeIcon icon={faPlus} />
                Agregar Item
              </button>
            </div>

            <div className="overflow-x-auto">
              <table className="w-full text-sm">
                <thead className="bg-gray-100">
                  <tr>
                    <th className="px-4 py-3 text-left font-semibold">
                      Descripción
                    </th>
                    <th className="px-4 py-3 text-left font-semibold w-24">
                      Cantidad
                    </th>
                    <th className="px-4 py-3 text-left font-semibold w-32">
                      Precio Unitario
                    </th>
                    <th className="px-4 py-3 text-left font-semibold w-32">
                      Total
                    </th>
                    <th className="px-4 py-3 text-left font-semibold w-16">
                      Acción
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {form.items.map((item, index) => (
                    <tr key={item.id} className="border-b">
                      <td className="px-4 py-3">
                        <input
                          type="text"
                          value={item.descripcion}
                          onChange={(e) =>
                            handleItemChange(
                              item.id,
                              "descripcion",
                              e.target.value
                            )
                          }
                          className={`w-full border rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                            errors[`item_${index}_descripcion`]
                              ? "border-red-500"
                              : "border-gray-300"
                          }`}
                          placeholder="Descripción del producto/servicio"
                        />
                        {errors[`item_${index}_descripcion`] && (
                          <p className="text-red-500 text-xs mt-1">
                            {errors[`item_${index}_descripcion`]}
                          </p>
                        )}
                      </td>
                      <td className="px-4 py-3">
                        <input
                          type="number"
                          min="1"
                          value={item.cantidad}
                          onChange={(e) =>
                            handleItemChange(
                              item.id,
                              "cantidad",
                              parseInt(e.target.value) || 0
                            )
                          }
                          className={`w-full border rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                            errors[`item_${index}_cantidad`]
                              ? "border-red-500"
                              : "border-gray-300"
                          }`}
                        />
                        {errors[`item_${index}_cantidad`] && (
                          <p className="text-red-500 text-xs mt-1">
                            {errors[`item_${index}_cantidad`]}
                          </p>
                        )}
                      </td>
                      <td className="px-4 py-3">
                        <input
                          type="number"
                          min="0"
                          step="0.01"
                          value={item.precioUnitario}
                          onChange={(e) =>
                            handleItemChange(
                              item.id,
                              "precioUnitario",
                              parseFloat(e.target.value) || 0
                            )
                          }
                          className={`w-full border rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                            errors[`item_${index}_precio`]
                              ? "border-red-500"
                              : "border-gray-300"
                          }`}
                          placeholder="0.00"
                        />
                        {errors[`item_${index}_precio`] && (
                          <p className="text-red-500 text-xs mt-1">
                            {errors[`item_${index}_precio`]}
                          </p>
                        )}
                      </td>
                      <td className="px-4 py-3">
                        <div className="font-bold text-green-600">
                          ${item.total.toFixed(2)}
                        </div>
                      </td>
                      <td className="px-4 py-3">
                        {form.items.length > 1 && (
                          <button
                            type="button"
                            onClick={() => removeItem(item.id)}
                            className="text-red-600 hover:text-red-800"
                          >
                            <FontAwesomeIcon icon={faTrash} />
                          </button>
                        )}
                      </td>
                    </tr>
                  ))}
                </tbody>
                <tfoot className="bg-gray-50">
                  <tr>
                    <td
                      colSpan={3}
                      className="px-4 py-4 text-right font-semibold text-lg"
                    >
                      Total de la Factura:
                    </td>
                    <td className="px-4 py-4 font-bold text-xl text-green-600">
                      ${invoiceTotal.toFixed(2)}
                    </td>
                    <td></td>
                  </tr>
                </tfoot>
              </table>
            </div>
          </div>

          {/* Form Actions */}
          <div className="flex gap-4 pt-6">
            <button
              type="submit"
              disabled={isSubmitting || invoiceTotal === 0}
              className="bg-black text-white px-8 py-3 rounded-lg hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-500 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
            >
              {isSubmitting ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  Creando Factura...
                </>
              ) : (
                <>
                  <FontAwesomeIcon icon={faSave} />
                  Crear Factura
                </>
              )}
            </button>
            <a
              href="/facturas"
              className="bg-gray-300 text-gray-700 px-8 py-3 rounded-lg hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-300"
            >
              Cancelar
            </a>
          </div>
        </form>
      </main>
    </div>
  );
}
